<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use App\Models\User;
use App\Models\Unit;
use App\Models\Forcing;

class SystemStatus extends Command
{
    protected $signature = 'system:status';
    protected $description = 'Verifica status completo do sistema';

    public function handle()
    {
        $this->info('üìä STATUS DO SISTEMA DE FORCING');
        $this->line('===============================');
        $this->newLine();

        // 1. Informa√ß√µes do Ambiente
        $this->info('üåç AMBIENTE:');
        $this->line('   Laravel: ' . app()->version());
        $this->line('   Ambiente: ' . app()->environment());
        $this->line('   Debug: ' . (config('app.debug') ? 'Ativo' : 'Inativo'));
        $this->line('   URL: ' . config('app.url'));
        $this->newLine();

        // 2. Banco de Dados
        $this->info('üóÑÔ∏è BANCO DE DADOS:');
        try {
            $pdo = DB::connection()->getPdo();
            $this->line('   ‚úÖ Conex√£o: OK');
            $this->line('   Driver: ' . $pdo->getAttribute(\PDO::ATTR_DRIVER_NAME));
            $this->line('   Vers√£o: ' . $pdo->getAttribute(\PDO::ATTR_SERVER_VERSION));
        } catch (\Exception $e) {
            $this->line('   ‚ùå Erro: ' . $e->getMessage());
        }
        $this->newLine();

        // 3. Tabelas e Dados
        $this->info('üìã ESTAT√çSTICAS:');
        try {
            $totalUsers = User::count();
            $superAdmins = User::where('is_super_admin', true)->count();
            $totalUnits = Unit::count();
            $activeUnits = Unit::where('active', true)->count();
            $totalForcings = Forcing::count();
            $forcingsForcados = Forcing::where('status', 'For√ßado')->count();
            $forcingsRetirados = Forcing::where('status', 'Retirado')->count();

            $this->line("   üë• Usu√°rios: $totalUsers (Super Admins: $superAdmins)");
            $this->line("   üè¢ Unidades: $totalUnits (Ativas: $activeUnits)");
            $this->line("   ‚ö° Forcings: $totalForcings (For√ßados: $forcingsForcados, Retirados: $forcingsRetirados)");
            
        } catch (\Exception $e) {
            $this->line('   ‚ùå Erro ao buscar dados: ' . $e->getMessage());
        }
        $this->newLine();

        // 4. Super Admin
        $this->info('üëë SUPER ADMIN:');
        try {
            $superAdmin = User::where('is_super_admin', true)->first();
            if ($superAdmin) {
                $this->line('   ‚úÖ Encontrado: ' . $superAdmin->name);
                $this->line('   üìß Email: ' . $superAdmin->email);
                $this->line('   üë§ Username: ' . $superAdmin->username);
            } else {
                $this->line('   ‚ùå Super Admin n√£o encontrado!');
                $this->warn('   Execute: php artisan create:super-admin');
            }
        } catch (\Exception $e) {
            $this->line('   ‚ùå Erro: ' . $e->getMessage());
        }
        $this->newLine();

        // 5. Unidades por Perfil
        $this->info('üè¢ UNIDADES POR PERFIL:');
        try {
            $profileStats = DB::table('users')
                ->join('units', 'users.unit_id', '=', 'units.id')
                ->select('units.name', 'users.profile', DB::raw('count(*) as total'))
                ->where('users.is_super_admin', false)
                ->groupBy('units.name', 'users.profile')
                ->orderBy('units.name')
                ->get();

            $currentUnit = null;
            foreach ($profileStats as $stat) {
                if ($currentUnit !== $stat->name) {
                    $this->line("   üìç {$stat->name}:");
                    $currentUnit = $stat->name;
                }
                $this->line("      ‚Ä¢ {$stat->profile}: {$stat->total}");
            }
        } catch (\Exception $e) {
            $this->line('   ‚ùå Erro: ' . $e->getMessage());
        }
        $this->newLine();

        // 6. √öltimos Forcings
        $this->info('‚ö° √öLTIMOS FORCINGS:');
        try {
            $latestForcings = Forcing::with(['unit', 'user'])
                ->orderBy('created_at', 'desc')
                ->take(5)
                ->get();

            foreach ($latestForcings as $forcing) {
                $status = $forcing->getStatusTexto();
                $unit = $forcing->unit ? $forcing->unit->name : 'N/A';
                $user = $forcing->user ? $forcing->user->name : 'N/A';
                $date = $forcing->created_at->format('d/m/Y H:i');
                
                $this->line("   ‚Ä¢ [{$status}] {$forcing->equipamento} ({$unit}) - {$user} em {$date}");
            }
        } catch (\Exception $e) {
            $this->line('   ‚ùå Erro: ' . $e->getMessage());
        }
        $this->newLine();

        // 7. Cache e Performance
        $this->info('üöÄ PERFORMANCE:');
        $configCached = file_exists(base_path('bootstrap/cache/config.php'));
        $routesCached = file_exists(base_path('bootstrap/cache/routes-v7.php'));
        $viewsCached = is_dir(storage_path('framework/views')) && count(glob(storage_path('framework/views/*.php'))) > 0;

        $this->line('   Config Cache: ' . ($configCached ? '‚úÖ Ativo' : '‚ùå Inativo'));
        $this->line('   Routes Cache: ' . ($routesCached ? '‚úÖ Ativo' : '‚ùå Inativo'));
        $this->line('   Views Cache: ' . ($viewsCached ? '‚úÖ Ativo' : '‚ùå Inativo'));
        $this->newLine();

        // 8. Permiss√µes
        $this->info('üìÅ PERMISS√ïES:');
        $storageWritable = is_writable(storage_path());
        $bootstrapWritable = is_writable(base_path('bootstrap/cache'));
        
        $this->line('   Storage: ' . ($storageWritable ? '‚úÖ Grav√°vel' : '‚ùå Sem permiss√£o'));
        $this->line('   Bootstrap Cache: ' . ($bootstrapWritable ? '‚úÖ Grav√°vel' : '‚ùå Sem permiss√£o'));
        $this->newLine();

        // 9. URLs Importantes
        $this->info('üîó ACESSO AO SISTEMA:');
        $baseUrl = rtrim(config('app.url'), '/');
        $this->line("   üè† Home: {$baseUrl}");
        $this->line("   üîê Login: {$baseUrl}/login");
        $this->line("   üìä Dashboard: {$baseUrl}/dashboard");
        $this->line("   üëë Admin: {$baseUrl}/admin/units");
        $this->newLine();

        // 10. Servidor Web
        $this->info('üåê SERVIDOR WEB:');
        $this->line('   IP: 31.97.168.137');
        $this->line('   üîó Acesso Direto: http://31.97.168.137/');
        $this->line('   üîó Dom√≠nio: http://forcing.devaxis.com.br/');
        $this->line('   üë§ Login: superadmin / admin123');
        $this->newLine();

        $this->info('‚úÖ Verifica√ß√£o conclu√≠da!');
        
        return 0;
    }
}
