<?php

namespace App\Console\Commands;

use App\Models\Unit;
use App\Models\User;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Hash;

class TestUserCreation extends Command
{
    protected $signature = 'test:user-creation';
    protected $description = 'Testa a cria√ß√£o de usu√°rio com unidade';

    public function handle()
    {
        $this->info('üß™ TESTE DE CRIA√á√ÉO DE USU√ÅRIO COM UNIDADE');
        $this->line('=============================================');
        $this->newLine();

        // Mostrar unidades dispon√≠veis
        $this->info('üìç UNIDADES DISPON√çVEIS:');
        $units = Unit::where('active', true)->get();
        
        foreach ($units as $unit) {
            $this->line("   ‚Ä¢ {$unit->code} - {$unit->name} ({$unit->company})");
        }
        $this->newLine();

        // Criar um usu√°rio de teste
        $unitTest = $units->first();
        if (!$unitTest) {
            $this->error('‚ùå Nenhuma unidade ativa encontrada!');
            return 1;
        }

        $testUsername = 'teste.usuario.' . time();
        
        $this->info("üë§ CRIANDO USU√ÅRIO DE TESTE:");
        $this->line("   Username: {$testUsername}");
        $this->line("   Unidade: {$unitTest->code} - {$unitTest->name}");

        try {
            $user = User::create([
                'name' => 'Usu√°rio de Teste',
                'username' => $testUsername,
                'email' => $testUsername . '@teste.com',
                'password' => Hash::make('123456789'),
                'empresa' => $unitTest->company,
                'setor' => 'Teste',
                'perfil' => 'user',
                'unit_id' => $unitTest->id,
            ]);

            $this->info('‚úÖ USU√ÅRIO CRIADO COM SUCESSO!');
            $this->newLine();

            // Verificar relacionamentos
            $this->info('üîç VERIFICA√á√ÉO DE RELACIONAMENTOS:');
            $this->line("   ID do usu√°rio: {$user->id}");
            $this->line("   Unidade associada: " . ($user->unit ? $user->unit->name : 'Nenhuma'));
            $this->line("   Pode criar forcing? " . ($user->unit ? '‚úÖ Sim' : '‚ùå N√£o'));
            
            // Verificar se o usu√°rio pode ver apenas forcings da sua unidade
            $forcingsVis√≠veis = \App\Models\Forcing::where('unit_id', $user->unit_id)->count();
            $totalForcings = \App\Models\Forcing::count();
            
            $this->newLine();
            $this->info('üîí VERIFICA√á√ÉO DE ISOLAMENTO:');
            $this->line("   Forcings vis√≠veis para este usu√°rio: {$forcingsVis√≠veis}");
            $this->line("   Total de forcings no sistema: {$totalForcings}");
            
            if ($forcingsVis√≠veis < $totalForcings) {
                $this->info('‚úÖ ISOLAMENTO FUNCIONANDO - Usu√°rio n√£o v√™ forcings de outras unidades');
            } else {
                $this->warn('‚ö†Ô∏è Todos os forcings s√£o vis√≠veis - verificar middleware');
            }

            $this->newLine();
            $this->info('üßπ LIMPANDO TESTE...');
            $user->delete();
            $this->info('‚úÖ Usu√°rio de teste removido');

        } catch (\Exception $e) {
            $this->error('‚ùå ERRO AO CRIAR USU√ÅRIO:');
            $this->error($e->getMessage());
            return 1;
        }

        $this->newLine();
        $this->info('‚úÖ TESTE CONCLU√çDO COM SUCESSO!');
        $this->line('O sistema de cria√ß√£o de usu√°rios com unidades est√° funcionando corretamente.');
        
        return 0;
    }
}
