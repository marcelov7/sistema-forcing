<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;

class CheckMigrationCompatibilityCommand extends Command
{
    protected $signature = 'migrate:check-mysql';
    protected $description = 'Verifica a compatibilidade das migra√ß√µes com MySQL';

    public function handle()
    {
        $this->info('üîç VERIFICANDO COMPATIBILIDADE MYSQL - CLOUDPANEL');
        $this->info('=================================================');
        
        // Verificar arquivos de migra√ß√£o
        $migrationPath = database_path('migrations');
        $migrations = glob($migrationPath . '/*.php');
        
        $this->newLine();
        $this->info('üìã MIGRA√á√ïES ENCONTRADAS:');
        
        $count = 0;
        foreach ($migrations as $migration) {
            $count++;
            $filename = basename($migration);
            $this->line("  {$count}. {$filename}");
        }
        
        $this->newLine();
        $this->info("üìä TOTAL: {$count} migra√ß√µes");
        
        // Verificar conex√£o atual
        $this->newLine();
        $this->info('üîó CONFIGURA√á√ÉO ATUAL:');
        
        $connection = config('database.default');
        $dbConfig = config("database.connections.{$connection}");
        
        $this->table(
            ['Configura√ß√£o', 'Valor'],
            [
                ['Conex√£o Padr√£o', $connection],
                ['Driver', $dbConfig['driver'] ?? 'N/A'],
                ['Host', $dbConfig['host'] ?? 'N/A'],
                ['Port', $dbConfig['port'] ?? 'N/A'],
                ['Database', $dbConfig['database'] ?? 'N/A'],
                ['Charset', $dbConfig['charset'] ?? 'N/A'],
                ['Collation', $dbConfig['collation'] ?? 'N/A'],
                ['Engine', $dbConfig['engine'] ?? 'N/A'],
            ]
        );
        
        // Verificar status das migra√ß√µes
        $this->newLine();
        $this->info('üìà STATUS DAS MIGRA√á√ïES:');
        
        try {
            if (Schema::hasTable('migrations')) {
                $executed = DB::table('migrations')->count();
                $this->info("‚úÖ Tabela 'migrations' existe");
                $this->info("‚úÖ Migra√ß√µes executadas: {$executed}");
                
                // Listar migra√ß√µes executadas
                $executedMigrations = DB::table('migrations')
                    ->orderBy('batch')
                    ->orderBy('migration')
                    ->get();
                
                if ($executedMigrations->isNotEmpty()) {
                    $this->newLine();
                    $this->info('üóÉÔ∏è MIGRA√á√ïES EXECUTADAS:');
                    foreach ($executedMigrations as $migration) {
                        $this->line("  Batch {$migration->batch}: {$migration->migration}");
                    }
                }
            } else {
                $this->warn("‚ö†Ô∏è Tabela 'migrations' n√£o existe - Execute: php artisan migrate");
            }
        } catch (\Exception $e) {
            $this->error("‚ùå Erro ao verificar migra√ß√µes: " . $e->getMessage());
        }
        
        // Verificar tabelas do sistema
        $this->newLine();
        $this->info('üìã VERIFICA√á√ÉO DE TABELAS:');
        
        $expectedTables = [
            'users' => 'Usu√°rios do sistema',
            'forcing' => 'Forcing principais',
            'cache' => 'Sistema de cache',
            'jobs' => 'Fila de tarefas',
            'sessions' => 'Sess√µes de usu√°rio',
            'password_reset_tokens' => 'Tokens de reset'
        ];
        
        foreach ($expectedTables as $table => $description) {
            if (Schema::hasTable($table)) {
                $count = DB::table($table)->count();
                $this->info("‚úÖ {$table}: {$description} ({$count} registros)");
            } else {
                $this->warn("‚ö†Ô∏è {$table}: {$description} (n√£o existe)");
            }
        }
        
        // Recomenda√ß√µes para MySQL
        $this->newLine();
        $this->info('üí° RECOMENDA√á√ïES PARA MYSQL/CLOUDPANEL:');
        
        $recommendations = [
            '‚úÖ Usar charset utf8mb4 para suporte completo Unicode',
            '‚úÖ Usar collation utf8mb4_unicode_ci para ordena√ß√£o adequada',
            '‚úÖ Engine InnoDB para suporte a foreign keys',
            '‚úÖ MySQL vers√£o 5.7+ ou MariaDB 10.2+',
            '‚úÖ Configurar timezone adequado (America/Sao_Paulo)',
            '‚úÖ Backup antes de executar migra√ß√µes em produ√ß√£o'
        ];
        
        foreach ($recommendations as $rec) {
            $this->line("  {$rec}");
        }
        
        // Comandos √∫teis
        $this->newLine();
        $this->info('üõ†Ô∏è COMANDOS √öTEIS PARA CLOUDPANEL:');
        
        $commands = [
            'php artisan migrate' => 'Executar migra√ß√µes pendentes',
            'php artisan migrate:status' => 'Ver status das migra√ß√µes',
            'php artisan migrate:fresh --seed' => 'Recriar banco com dados iniciais',
            'php artisan db:seed' => 'Popular dados iniciais',
            'php artisan migrate:rollback' => 'Reverter √∫ltima migra√ß√£o'
        ];
        
        foreach ($commands as $command => $desc) {
            $this->line("  <comment>{$command}</comment> - {$desc}");
        }
        
        $this->newLine();
        $this->info('üéâ VERIFICA√á√ÉO CONCLU√çDA!');
        
        // Verificar se est√° pronto para produ√ß√£o
        if ($connection === 'mysql') {
            $this->info('‚úÖ Sistema configurado para MySQL - Pronto para CloudPanel!');
        } else {
            $this->warn('‚ö†Ô∏è Sistema atual: ' . strtoupper($connection) . ' - Configure MySQL para produ√ß√£o');
        }
        
        return 0;
    }
}
