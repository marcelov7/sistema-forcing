<?php

namespace App\Console\Commands;

use App\Models\TermsAcceptance;
use App\Models\User;
use Illuminate\Console\Command;

class CheckTermsAcceptances extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'terms:check {--user= : ID do usu√°rio espec√≠fico} {--recent : Mostrar apenas os √∫ltimos 30 dias}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Verificar aceites dos termos de responsabilidade';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üìã RELAT√ìRIO DE ACEITES DOS TERMOS DE RESPONSABILIDADE');
        $this->info('='.str_repeat('=', 60));

        $query = TermsAcceptance::with('user');

        // Filtro por usu√°rio espec√≠fico
        if ($this->option('user')) {
            $query->where('user_id', $this->option('user'));
            $user = User::find($this->option('user'));
            if ($user) {
                $this->info("üìç Filtrado para usu√°rio: {$user->name} ({$user->email})");
            } else {
                $this->error('‚ùå Usu√°rio n√£o encontrado!');
                return 1;
            }
        }

        // Filtro por per√≠odo recente
        if ($this->option('recent')) {
            $query->where('accepted_at', '>=', now()->subDays(30));
            $this->info('‚è∞ Mostrando apenas os √∫ltimos 30 dias');
        }

        $acceptances = $query->orderBy('accepted_at', 'desc')->get();

        if ($acceptances->isEmpty()) {
            $this->warn('‚ö†Ô∏è  Nenhum aceite de termo encontrado com os filtros aplicados.');
            return 0;
        }

        $this->info("\nüîç Total de aceites encontrados: {$acceptances->count()}");
        $this->info('‚îÄ'.str_repeat('‚îÄ', 60));

        // Tabela com os dados
        $headers = ['ID', 'Usu√°rio', 'Email', 'Data/Hora', 'Procedimento', 'IP', 'Navegador'];
        $rows = [];

        foreach ($acceptances as $acceptance) {
            $rows[] = [
                $acceptance->id,
                $acceptance->user->name ?? 'N/A',
                $acceptance->user->email ?? 'N/A',
                $acceptance->accepted_at->format('d/m/Y H:i:s'),
                $acceptance->procedure_version ?? 'N/A',
                $acceptance->ip_address ?? 'N/A',
                substr($acceptance->user_agent ?? 'N/A', 0, 30) . '...'
            ];
        }

        $this->table($headers, $rows);

        // Estat√≠sticas
        $this->info("\nüìä ESTAT√çSTICAS:");
        $this->info('‚îÄ'.str_repeat('‚îÄ', 30));

        $userStats = $acceptances->groupBy('user_id');
        $this->info("üë• Usu√°rios √∫nicos: " . $userStats->count());

        $today = $acceptances->where('accepted_at', '>=', now()->startOfDay())->count();
        $this->info("üìÖ Aceites hoje: {$today}");

        $thisWeek = $acceptances->where('accepted_at', '>=', now()->startOfWeek())->count();
        $this->info("üìÖ Aceites esta semana: {$thisWeek}");

        $thisMonth = $acceptances->where('accepted_at', '>=', now()->startOfMonth())->count();
        $this->info("üìÖ Aceites este m√™s: {$thisMonth}");

        // Usu√°rios com mais aceites
        if ($userStats->count() > 1 && !$this->option('user')) {
            $this->info("\nüèÜ TOP USU√ÅRIOS (mais aceites):");
            $topUsers = $userStats->map(function ($group) {
                return [
                    'user' => $group->first()->user,
                    'count' => $group->count(),
                    'last_acceptance' => $group->max('accepted_at')
                ];
            })->sortByDesc('count')->take(5);

            foreach ($topUsers as $data) {
                $lastAcceptance = \Carbon\Carbon::parse($data['last_acceptance'])->format('d/m/Y H:i');
                $this->line("   ‚Ä¢ {$data['user']->name}: {$data['count']} aceites (√∫ltimo: {$lastAcceptance})");
            }
        }

        $this->info("\n‚úÖ Relat√≥rio conclu√≠do!");
        return 0;
    }
}
